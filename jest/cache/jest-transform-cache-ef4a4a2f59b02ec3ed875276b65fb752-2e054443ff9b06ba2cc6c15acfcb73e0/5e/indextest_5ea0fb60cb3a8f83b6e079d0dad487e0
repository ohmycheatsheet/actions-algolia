f31145d5ad36f77e67c837325a20653c
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var wait_1 = (0, tslib_1.__importDefault)(require("../src/wait"));
var process_1 = (0, tslib_1.__importDefault)(require("process"));
var child_process_1 = (0, tslib_1.__importDefault)(require("child_process"));
var path_1 = (0, tslib_1.__importDefault)(require("path"));
test('throws invalid number', function () { return (0, tslib_1.__awaiter)(void 0, void 0, void 0, function () {
    return (0, tslib_1.__generator)(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, expect((0, wait_1.default)('foo')).rejects.toThrow('milliseconds not a number')];
            case 1:
                _a.sent();
                return [2 /*return*/];
        }
    });
}); });
test('wait 500 ms', function () { return (0, tslib_1.__awaiter)(void 0, void 0, void 0, function () {
    var start, end, delta;
    return (0, tslib_1.__generator)(this, function (_a) {
        switch (_a.label) {
            case 0:
                start = new Date();
                return [4 /*yield*/, (0, wait_1.default)(500)];
            case 1:
                _a.sent();
                end = new Date();
                delta = Math.abs(end.valueOf() - start.valueOf());
                expect(delta).toBeGreaterThanOrEqual(500);
                return [2 /*return*/];
        }
    });
}); });
// shows how the runner will run a javascript action with env / stdout protocol
test('test runs', function () {
    process_1.default.env['INPUT_MILLISECONDS'] = 500;
    var ip = path_1.default.join(__dirname, '../dist/index.js');
    console.log(child_process_1.default.execSync("node " + ip, { env: process_1.default.env }).toString());
});
